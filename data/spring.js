var list =
    [
        {"quest":"核心容器","anser":"Core，Beans，Context，EL 模块。"},
        {"quest":"Core模块","anser":"封装了框架依赖的最底层部分。资源访问，类型转换，工具类"},
        {"quest":"Beans模块","anser":"反转控制和依赖注入(类似ng),单例模式。"},
        {"quest":"Context模块","anser":"核心接口是ApplicationContext,全局事件，生命周期等。"},
        {"quest":"AOP模块","anser":"面向方面的编程，日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，"},
        {"quest":"Aspects模块","anser":"AspectJ提供了比Spring ASP更强大的功能"},
        {"quest":"IoC是什么","anser":"Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制"},
        {"quest":"谁控制谁，控制什么","anser":"Ioc容器来控制对象的创建，IoC 容器控制了对象，主要控制了外部资源获取（不只是对象包括比如文件等）"},
        {"quest":"为何是反转，哪些方面反转了","anser":"由容器来帮忙创建及注入依赖对象，"},
        {"quest":"IoC能做什么","anser":"由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找"},
        {"quest":"依赖注入","anser":"组件之间依赖关系由容器在运行期决定，容器动态的将某个依赖关系注入到组件之中"},
        {"quest":"谁依赖于谁","anser":"当然是应用程序依赖于IoC容器，某个组件依赖Ioc容器的对象"},
        {"quest":"为什么需要依赖","anser":"应用程序需要IoC容器来提供对象需要的外部资源"},
        {"quest":"谁注入谁","anser":"很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象"},
        {"quest":"注入了什么","anser":"就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）"},
    ]
